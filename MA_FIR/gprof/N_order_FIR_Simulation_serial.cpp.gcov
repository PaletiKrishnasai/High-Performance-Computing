        -:    0:Source:N_order_FIR_Simulation_serial.cpp
        -:    0:Graph:N_order_FIR_Simulation_serial.gcno
        -:    0:Data:N_order_FIR_Simulation_serial.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:Author : Paleti Krishnasai CED18I039
        -:    3:Simulation of N-order moving average FIR filter
        -:    4:	N : order of the filter
        -:    5:	n : instance  
        -:    6:	filter equation : output_signal[n] = (input_signal[n-1] + input_signal[n] + input_signal[n11]) / (N+1)
        -:    7:*/
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <iostream>
        -:   11:#include <stdlib.h>
        -:   12:#include <time.h>
        -:   13://#include <omp.h>
        -:   14:
        -:   15:using namespace std;
        -:   16:
        -:   17:#define N 6
        -:   18:#define size 200000
        -:   19:
function main called 1 returned 100% blocks executed 100%
        1:   20:int main ()
        -:   21:{
        1:   22:	srand (time(0));
        1:   22-block  0
call    0 returned 100%
call    1 returned 100%
        -:   23:	//float startTime, endTime,execTime;
        -:   24:	long double input_signal[size], output_signal[size], random_input;
        -:   25:
        -:   26:	// initialize input signal using random values
   200001:   27:	for (int i = 0; i < size; i++)
   200001:   27-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
        -:   28:	{	
   200000:   29:		random_input = static_cast <long double> (rand());
   200000:   29-block  0
call    0 returned 100%
   200000:   30:		input_signal[i] =i*random_input;
        -:   31:		//input_signal[i] =i*( static_cast <long double> (rand()));
        -:   32:	}
        -:   33:	//startTime = omp_get_wtime();
        -:   34:	// filter equation
        -:   35:	
        1:   36:		output_signal[0] = (input_signal[0] + input_signal[1]) / (N+1); // edge case 1
   199999:   37:		for (int i = 1; i < size-1; i++)
        1:   37-block  0
   199999:   37-block  1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
   199998:   37-block  2
        -:   38:		{
39999799998:   39:			for(int k=0;k<size;k++)
   199998:   39-block  0
39999799998:   39-block  1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
39999600000:   40:			output_signal[i] = (input_signal[i-1] + input_signal[i] + input_signal[i+1]) / (N+1);
39999600000:   40-block  0
        -:   41:		}
        1:   42:		output_signal[size - 1] = (input_signal[size - 2] + input_signal[size - 1]) / (N+1); // edge case 2
        -:   43:	
        -:   44:	//for (int i = 0; i < size; i++)
        -:   45:	//printf("%Lf\n",y[i]);
        -:   46:
        -:   47:	//endTime = omp_get_wtime();
        -:   48:	//execTime = endTime - startTime;
        -:   49:	//cout << execTime << endl;
        -:   50:
        1:   51:	return 0;
        1:   51-block  0
        -:   52:}
